// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BuildP2P.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_BuildP2P_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_BuildP2P_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_BuildP2P_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_BuildP2P_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_BuildP2P_2eproto;
namespace IM {
class BuildP2P;
class BuildP2PDefaultTypeInternal;
extern BuildP2PDefaultTypeInternal _BuildP2P_default_instance_;
}  // namespace IM
PROTOBUF_NAMESPACE_OPEN
template<> ::IM::BuildP2P* Arena::CreateMaybeMessage<::IM::BuildP2P>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace IM {

// ===================================================================

class BuildP2P PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.BuildP2P) */ {
 public:
  inline BuildP2P() : BuildP2P(nullptr) {};
  virtual ~BuildP2P();

  BuildP2P(const BuildP2P& from);
  BuildP2P(BuildP2P&& from) noexcept
    : BuildP2P() {
    *this = ::std::move(from);
  }

  inline BuildP2P& operator=(const BuildP2P& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuildP2P& operator=(BuildP2P&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuildP2P& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BuildP2P* internal_default_instance() {
    return reinterpret_cast<const BuildP2P*>(
               &_BuildP2P_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BuildP2P& a, BuildP2P& b) {
    a.Swap(&b);
  }
  inline void Swap(BuildP2P* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuildP2P* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuildP2P* New() const final {
    return CreateMaybeMessage<BuildP2P>(nullptr);
  }

  BuildP2P* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuildP2P>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuildP2P& from);
  void MergeFrom(const BuildP2P& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildP2P* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.BuildP2P";
  }
  protected:
  explicit BuildP2P(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BuildP2P_2eproto);
    return ::descriptor_table_BuildP2P_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeerIPFieldNumber = 6,
    kNetworkTypeFieldNumber = 1,
    kFlagFieldNumber = 2,
    kMsgIDFieldNumber = 3,
    kRecvIDFieldNumber = 4,
    kPeerIDFieldNumber = 5,
    kPeerPosrtFieldNumber = 7,
    kSendIDFieldNumber = 8,
  };
  // string peerIP = 6;
  void clear_peerip();
  const std::string& peerip() const;
  void set_peerip(const std::string& value);
  void set_peerip(std::string&& value);
  void set_peerip(const char* value);
  void set_peerip(const char* value, size_t size);
  std::string* mutable_peerip();
  std::string* release_peerip();
  void set_allocated_peerip(std::string* peerip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_peerip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_peerip(
      std::string* peerip);
  private:
  const std::string& _internal_peerip() const;
  void _internal_set_peerip(const std::string& value);
  std::string* _internal_mutable_peerip();
  public:

  // int32 networkType = 1;
  void clear_networktype();
  ::PROTOBUF_NAMESPACE_ID::int32 networktype() const;
  void set_networktype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_networktype() const;
  void _internal_set_networktype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 flag = 2;
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flag() const;
  void _internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 msgID = 3;
  void clear_msgid();
  ::PROTOBUF_NAMESPACE_ID::int32 msgid() const;
  void set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msgid() const;
  void _internal_set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 recvID = 4;
  void clear_recvid();
  ::PROTOBUF_NAMESPACE_ID::int32 recvid() const;
  void set_recvid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_recvid() const;
  void _internal_set_recvid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 peerID = 5;
  void clear_peerid();
  ::PROTOBUF_NAMESPACE_ID::int32 peerid() const;
  void set_peerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_peerid() const;
  void _internal_set_peerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 peerPosrt = 7;
  void clear_peerposrt();
  ::PROTOBUF_NAMESPACE_ID::int32 peerposrt() const;
  void set_peerposrt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_peerposrt() const;
  void _internal_set_peerposrt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sendID = 8;
  void clear_sendid();
  ::PROTOBUF_NAMESPACE_ID::int32 sendid() const;
  void set_sendid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sendid() const;
  void _internal_set_sendid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.BuildP2P)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peerip_;
  ::PROTOBUF_NAMESPACE_ID::int32 networktype_;
  ::PROTOBUF_NAMESPACE_ID::int32 flag_;
  ::PROTOBUF_NAMESPACE_ID::int32 msgid_;
  ::PROTOBUF_NAMESPACE_ID::int32 recvid_;
  ::PROTOBUF_NAMESPACE_ID::int32 peerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 peerposrt_;
  ::PROTOBUF_NAMESPACE_ID::int32 sendid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BuildP2P_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BuildP2P

// int32 networkType = 1;
inline void BuildP2P::clear_networktype() {
  networktype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuildP2P::_internal_networktype() const {
  return networktype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuildP2P::networktype() const {
  // @@protoc_insertion_point(field_get:IM.BuildP2P.networkType)
  return _internal_networktype();
}
inline void BuildP2P::_internal_set_networktype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  networktype_ = value;
}
inline void BuildP2P::set_networktype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_networktype(value);
  // @@protoc_insertion_point(field_set:IM.BuildP2P.networkType)
}

// int32 flag = 2;
inline void BuildP2P::clear_flag() {
  flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuildP2P::_internal_flag() const {
  return flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuildP2P::flag() const {
  // @@protoc_insertion_point(field_get:IM.BuildP2P.flag)
  return _internal_flag();
}
inline void BuildP2P::_internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flag_ = value;
}
inline void BuildP2P::set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:IM.BuildP2P.flag)
}

// int32 msgID = 3;
inline void BuildP2P::clear_msgid() {
  msgid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuildP2P::_internal_msgid() const {
  return msgid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuildP2P::msgid() const {
  // @@protoc_insertion_point(field_get:IM.BuildP2P.msgID)
  return _internal_msgid();
}
inline void BuildP2P::_internal_set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msgid_ = value;
}
inline void BuildP2P::set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msgid(value);
  // @@protoc_insertion_point(field_set:IM.BuildP2P.msgID)
}

// int32 recvID = 4;
inline void BuildP2P::clear_recvid() {
  recvid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuildP2P::_internal_recvid() const {
  return recvid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuildP2P::recvid() const {
  // @@protoc_insertion_point(field_get:IM.BuildP2P.recvID)
  return _internal_recvid();
}
inline void BuildP2P::_internal_set_recvid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  recvid_ = value;
}
inline void BuildP2P::set_recvid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_recvid(value);
  // @@protoc_insertion_point(field_set:IM.BuildP2P.recvID)
}

// int32 sendID = 8;
inline void BuildP2P::clear_sendid() {
  sendid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuildP2P::_internal_sendid() const {
  return sendid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuildP2P::sendid() const {
  // @@protoc_insertion_point(field_get:IM.BuildP2P.sendID)
  return _internal_sendid();
}
inline void BuildP2P::_internal_set_sendid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sendid_ = value;
}
inline void BuildP2P::set_sendid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sendid(value);
  // @@protoc_insertion_point(field_set:IM.BuildP2P.sendID)
}

// int32 peerID = 5;
inline void BuildP2P::clear_peerid() {
  peerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuildP2P::_internal_peerid() const {
  return peerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuildP2P::peerid() const {
  // @@protoc_insertion_point(field_get:IM.BuildP2P.peerID)
  return _internal_peerid();
}
inline void BuildP2P::_internal_set_peerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  peerid_ = value;
}
inline void BuildP2P::set_peerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_peerid(value);
  // @@protoc_insertion_point(field_set:IM.BuildP2P.peerID)
}

// string peerIP = 6;
inline void BuildP2P::clear_peerip() {
  peerip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BuildP2P::peerip() const {
  // @@protoc_insertion_point(field_get:IM.BuildP2P.peerIP)
  return _internal_peerip();
}
inline void BuildP2P::set_peerip(const std::string& value) {
  _internal_set_peerip(value);
  // @@protoc_insertion_point(field_set:IM.BuildP2P.peerIP)
}
inline std::string* BuildP2P::mutable_peerip() {
  // @@protoc_insertion_point(field_mutable:IM.BuildP2P.peerIP)
  return _internal_mutable_peerip();
}
inline const std::string& BuildP2P::_internal_peerip() const {
  return peerip_.Get();
}
inline void BuildP2P::_internal_set_peerip(const std::string& value) {
  
  peerip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BuildP2P::set_peerip(std::string&& value) {
  
  peerip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BuildP2P.peerIP)
}
inline void BuildP2P::set_peerip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  peerip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BuildP2P.peerIP)
}
inline void BuildP2P::set_peerip(const char* value,
    size_t size) {
  
  peerip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BuildP2P.peerIP)
}
inline std::string* BuildP2P::_internal_mutable_peerip() {
  
  return peerip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BuildP2P::release_peerip() {
  // @@protoc_insertion_point(field_release:IM.BuildP2P.peerIP)
  return peerip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BuildP2P::set_allocated_peerip(std::string* peerip) {
  if (peerip != nullptr) {
    
  } else {
    
  }
  peerip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), peerip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BuildP2P.peerIP)
}
inline std::string* BuildP2P::unsafe_arena_release_peerip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:IM.BuildP2P.peerIP)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return peerip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BuildP2P::unsafe_arena_set_allocated_peerip(
    std::string* peerip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (peerip != nullptr) {
    
  } else {
    
  }
  peerip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      peerip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IM.BuildP2P.peerIP)
}

// int32 peerPosrt = 7;
inline void BuildP2P::clear_peerposrt() {
  peerposrt_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuildP2P::_internal_peerposrt() const {
  return peerposrt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuildP2P::peerposrt() const {
  // @@protoc_insertion_point(field_get:IM.BuildP2P.peerPosrt)
  return _internal_peerposrt();
}
inline void BuildP2P::_internal_set_peerposrt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  peerposrt_ = value;
}
inline void BuildP2P::set_peerposrt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_peerposrt(value);
  // @@protoc_insertion_point(field_set:IM.BuildP2P.peerPosrt)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace IM

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_BuildP2P_2eproto
